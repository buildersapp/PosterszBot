from openai import OpenAI
import json
import os
from dotenv import load_dotenv
from base import ResponseFormatter

load_dotenv()
client = OpenAI(api_key=os.getenv("OPENAI_KEY"))

# 1. Define a list of callable tools for the model
tools = [{
    "type": "function",
        "name": "citilytic_api",
        "description": "Send a post payload to the Citilytic API. The payload contains information. about a company or business, such as images, company details, contacts,categories, locations, and other relevant metadata. For now, this function just prints the JSON argument.",
        "parameters": {
            "type": "object",
            "properties": {
                "json_data": {
                    "type": "string",
                    "description": "A stringified JSON object containing all the business information to be sent to the Citilytic API."
                },
            },
            "required": ["json_data"],
        },
},
]

def get_horoscope(sign):
    return f"{sign}: Next Tuesday you will befriend a baby otter."

# Create a running input list we will add to over time
input_list = [
    {"role": "user", "content": "i want to upload my ads"}
]

# 2. Prompt the model with tools defined
response = client.responses.parse(
    model="gpt-4o",
    tools=tools,
    input=input_list,
    text_format=ResponseFormatter
)

# Save function call outputs for subsequent requests
input_list += response.output

print(response.output[0].content[0].text)
for item in response.output:
    if item.type == "function_call":
        if item.name == "get_horoscope":
            # 3. Execute the function logic for get_horoscope
            print(item.arguments)
            horoscope = get_horoscope(json.loads(item.arguments))
            
            # 4. Provide function call results to the model
            input_list.append({
                "type": "function_call_output",
                "call_id": item.call_id,
                "output": json.dumps({
                  "horoscope": horoscope
                })
            })

print("Final input:")

response = client.responses.create(
    model="gpt-4o",
    instructions="Respond only with a horoscope generated by a tool.",
    tools=tools,
    input=input_list,
)
# 5. The model should be able to give a response!
# print("Final output:")
# print(response.model_dump_json(indent=2))
# print("\n" + response.output_text)